yfffufuhdhdhfhdjdjfhdhdhdhfhfhfhd djdhdhud 

using Newtonsoft.Json;
using System;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Text;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.Extensions.Options;
using Microsoft.AspNetCore.Authentication;
using Microsoft.AspNetCore.Http;

namespace Common.Helpers
{
  
        public class HttpClientHelper<T> : IHttpClientHelper<T>
        {
            private static readonly HttpClient Client = new HttpClient();
            /// <summary>
            /// For getting a single item from a web api uaing GET
            /// </summary>
            /// <param name="apiUrl">Added to the base address to make the full url of the 
            ///     api get method, e.g. "products/1" to get a product with an id of 1</param>
            /// <param name="cancellationToken"></param>
            /// <returns>The item requested</returns>
            public async Task<T> GetSingleItemRequest(string apiUrl,CancellationToken cancellationToken)
            {
                var result = default(T);
                var response = await Client.GetAsync(apiUrl,cancellationToken).ConfigureAwait(false);
                if (response.IsSuccessStatusCode)
                {
                    await response.Content.ReadAsStringAsync().ContinueWith(x =>
                    {
                        if (typeof(T).Namespace != "System")
                        {
                            result = JsonConvert.DeserializeObject<T>(x?.Result);
                        }
                        else result = (T) Convert.ChangeType(x?.Result, typeof(T));
                    },cancellationToken);
                }
                else
                {
                    var content = await response.Content.ReadAsStringAsync();
                    response.Content?.Dispose();
                    throw new HttpRequestException($"{response.StatusCode}:{content}");
                }
                return result;
            }

            /// <summary>
            /// For getting multiple (or all) items from a web api using GET
            /// </summary>
            /// <param name="apiUrl">Added to the base address to make the full url of the 
            ///     api get method, e.g. "products?page=1" to get page 1 of the products</param>
            /// <param name="cancellationToken"></param>
            /// <returns>The items requested</returns>
            public async Task<T[]> GetMultipleItemsRequest(string apiUrl, CancellationToken cancellationToken)
            {
                T[] result = null;
                var response = await Client.GetAsync(apiUrl,cancellationToken).ConfigureAwait(false);
                if (response.IsSuccessStatusCode)
                {
                    await response.Content.ReadAsStringAsync().ContinueWith((Task<string> x) =>
                    {
                        result = JsonConvert.DeserializeObject<T[]>(x.Result);
                    },cancellationToken);
                }
                else
                {
                    var content = await response.Content.ReadAsStringAsync();
                    response.Content?.Dispose();
                    throw new HttpRequestException($"{response.StatusCode}:{content}");
                }
                return result;
            }

            /// <summary>
            /// For creating a new item over a web api using POST
            /// </summary>
            /// <param name="apiUrl">Added to the base address to make the full url of the 
            ///     api post method, e.g. "products" to add products</param>
            /// <param name="postObject">The object to be created</param>
            /// <param name="cancellationToken"></param>
            /// <returns>The item created</returns>
            public async Task<T> PostRequest(string apiUrl, T postObject, CancellationToken cancellationToken)
            {
                T result = default(T);
                var response = await Client.PostAsync(apiUrl, new JsonContent(postObject),cancellationToken).ConfigureAwait(false);
                if (response.IsSuccessStatusCode)
                {
                    await response.Content.ReadAsStringAsync().ContinueWith((Task<string> x) =>
                    {
                        result = JsonConvert.DeserializeObject<T>(x.Result);
                    },cancellationToken);
                }
                else
                {
                    var content = await response.Content.ReadAsStringAsync();
                    response.Content?.Dispose();
                    throw new HttpRequestException($"{response.StatusCode}:{content}");
                }
                return result;
            }

            /// <summary>
            /// For updating an existing item over a web api using PUT
            /// </summary>
            /// <param name="apiUrl">Added to the base address to make the full url of the 
            ///     api put method, e.g. "products/3" to update product with id of 3</param>
            /// <param name="putObject">The object to be edited</param>
            /// <param name="cancellationToken"></param>
            public async Task PutRequest(string apiUrl, T putObject, CancellationToken cancellationToken)
            {
                var response = await Client.PutAsync(apiUrl, new JsonContent(putObject),cancellationToken).ConfigureAwait(false);
                if (!response.IsSuccessStatusCode)
                {
                    var content = await response.Content.ReadAsStringAsync();
                    response.Content?.Dispose();
                    throw new HttpRequestException($"{response.StatusCode}:{content}");
                }
            }

            /// <summary>
            /// For deleting an existing item over a web api using DELETE
            /// </summary>
            /// <param name="apiUrl">Added to the base address to make the full url of the 
            ///     api delete method, e.g. "products/3" to delete product with id of 3</param>
            /// <param name="cancellationToken"></param>
            public async Task DeleteRequest(string apiUrl, CancellationToken cancellationToken)
            {
                var response = await Client.DeleteAsync(apiUrl,cancellationToken).ConfigureAwait(false);
                if (!response.IsSuccessStatusCode)
                {
                    var content = await response.Content.ReadAsStringAsync();
                    response.Content?.Dispose();
                    throw new HttpRequestException($"{response.StatusCode}:{content}");
                }
            }
        }
    }
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
67
68
69
70
71
72
73
74
75
76
77
78
79
80
81
82
83
84
85
86
87
88
89
90
91
92
93
94
95
96
97
98
99
100
101
102
103
104
105
106
107
108
109
110
111
112
113
114
115
116
117
118
119
120
121
122
123
124
125
126
127
128
129
130
131
132
133
134
135
136
137
138
139
using Newtonsoft.Json;
using System;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Text;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.Extensions.Options;
using Microsoft.AspNetCore.Authentication;
using Microsoft.AspNetCore.Http;
 
namespace Common.Helpers
{
  
        public class HttpClientHelper<T> : IHttpClientHelper<T>
        {
            private static readonly HttpClient Client = new HttpClient();
            /// <summary>
            /// For getting a single item from a web api uaing GET
            /// </summary>
            /// <param name="apiUrl">Added to the base address to make the full url of the 
            ///     api get method, e.g. "products/1" to get a product with an id of 1</param>
            /// <param name="cancellationToken"></param>
            /// <returns>The item requested</returns>
            public async Task<T> GetSingleItemRequest(string apiUrl,CancellationToken cancellationToken)
            {
                var result = default(T);
                var response = await Client.GetAsync(apiUrl,cancellationToken).ConfigureAwait(false);
                if (response.IsSuccessStatusCode)
                {
                    await response.Content.ReadAsStringAsync().ContinueWith(x =>
                    {
                        if (typeof(T).Namespace != "System")
                        {
                            result = JsonConvert.DeserializeObject<T>(x?.Result);
                        }
                        else result = (T) Convert.ChangeType(x?.Result, typeof(T));
                    },cancellationToken);
                }
                else
                {
                    var content = await response.Content.ReadAsStringAsync();
                    response.Content?.Dispose();
                    throw new HttpRequestException($"{response.StatusCode}:{content}");
                }
                return result;
            }
 
            /// <summary>
            /// For getting multiple (or all) items from a web api using GET
            /// </summary>
            /// <param name="apiUrl">Added to the base address to make the full url of the 
            ///     api get method, e.g. "products?page=1" to get page 1 of the products</param>
            /// <param name="cancellationToken"></param>
            /// <returns>The items requested</returns>
            public async Task<T[]> GetMultipleItemsRequest(string apiUrl, CancellationToken cancellationToken)
            {
                T[] result = null;
                var response = await Client.GetAsync(apiUrl,cancellationToken).ConfigureAwait(false);
                if (response.IsSuccessStatusCode)
                {
                    await response.Content.ReadAsStringAsync().ContinueWith((Task<string> x) =>
                    {
                        result = JsonConvert.DeserializeObject<T[]>(x.Result);
                    },cancellationToken);
                }
                else
                {
                    var content = await response.Content.ReadAsStringAsync();
                    response.Content?.Dispose();
                    throw new HttpRequestException($"{response.StatusCode}:{content}");
                }
                return result;
            }
 
            /// <summary>
            /// For creating a new item over a web api using POST
            /// </summary>
            /// <param name="apiUrl">Added to the base address to make the full url of the 
            ///     api post method, e.g. "products" to add products</param>
            /// <param name="postObject">The object to be created</param>
            /// <param name="cancellationToken"></param>
            /// <returns>The item created</returns>
            public async Task<T> PostRequest(string apiUrl, T postObject, CancellationToken cancellationToken)
            {
                T result = default(T);
                var response = await Client.PostAsync(apiUrl, new JsonContent(postObject),cancellationToken).ConfigureAwait(false);
                if (response.IsSuccessStatusCode)
                {
                    await response.Content.ReadAsStringAsync().ContinueWith((Task<string> x) =>
                    {
                        result = JsonConvert.DeserializeObject<T>(x.Result);
                    },cancellationToken);
                }
                else
                {
                    var content = await response.Content.ReadAsStringAsync();
                    response.Content?.Dispose();
                    throw new HttpRequestException($"{response.StatusCode}:{content}");
                }
                return result;
            }
 
            /// <summary>
            /// For updating an existing item over a web api using PUT
            /// </summary>
            /// <param name="apiUrl">Added to the base address to make the full url of the 
            ///     api put method, e.g. "products/3" to update product with id of 3</param>
            /// <param name="putObject">The object to be edited</param>
            /// <param name="cancellationToken"></param>
            public async Task PutRequest(string apiUrl, T putObject, CancellationToken cancellationToken)
            {
                var response = await Client.PutAsync(apiUrl, new JsonContent(putObject),cancellationToken).ConfigureAwait(false);
                if (!response.IsSuccessStatusCode)
                {
                    var content = await response.Content.ReadAsStringAsync();
                    response.Content?.Dispose();
                    throw new HttpRequestException($"{response.StatusCode}:{content}");
                }
            }
 
            /// <summary>
            /// For deleting an existing item over a web api using DELETE
            /// </summary>
            /// <param name="apiUrl">Added to the base address to make the full url of the 
            ///     api delete method, e.g. "products/3" to delete product with id of 3</param>
            /// <param name="cancellationToken"></param>
            public async Task DeleteRequest(string apiUrl, CancellationToken cancellationToken)
            {
                var response = await Client.DeleteAsync(apiUrl,cancellationToken).ConfigureAwait(false);
                if (!response.IsSuccessStatusCode)
                {
                    var content = await response.Content.ReadAsStringAsync();
                    response.Content?.Dispose();
                    throw new HttpRequestException($"{response.StatusCode}:{content}");
                }
            }
        }
    } 
